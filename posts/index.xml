<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Radar</title>
    <link>https://pjatgithub.github.io/posts/</link>
    <description>Recent content in Posts on Radar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jun 2018 21:00:33 +0800</lastBuildDate>
    
	<atom:link href="https://pjatgithub.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Experiments About Java Overloading</title>
      <link>https://pjatgithub.github.io/posts/experiments-about-java-overloading/</link>
      <pubDate>Fri, 15 Jun 2018 21:00:33 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/experiments-about-java-overloading/</guid>
      <description>Overloading In Java, overloading is a mechanism to declare two methods with the same name but different signatures (definition can be found in [1]).
Variable Argument List In Java 5, programmers are able to define methods which can be invoked with a variable number of arguments by using variable argument lists. For example, we can define a method like public static void play(Person... persons) and invoke it like play(p1, p2, p3, p4).</description>
    </item>
    
    <item>
      <title>Basic File Permissions on Unix-like Systems</title>
      <link>https://pjatgithub.github.io/posts/basic-file-permissions-on-unix-like-systems/</link>
      <pubDate>Fri, 09 Jun 2017 03:49:06 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/basic-file-permissions-on-unix-like-systems/</guid>
      <description>&lt;h2 id=&#34;basic-permissions&#34;&gt;Basic Permissions&lt;/h2&gt;

&lt;p&gt;Recently, I&amp;rsquo;ve been reading &lt;em&gt;The Linux Programming Interface&lt;/em&gt;. I decided to go through the first three chapters to review some basic concepts. When I was reading about the permissions of a directory, I was obsessed with a question that what do there permissions exactly mean? Indeed, I know about the permissions of a file. Users are divided into three categories: &lt;em&gt;user&lt;/em&gt;, &lt;em&gt;group&lt;/em&gt;, and &lt;em&gt;other&lt;/em&gt;. With &lt;em&gt;read&lt;/em&gt; permission, a user can read the content of the file; &lt;em&gt;write&lt;/em&gt; permission allows a user to change the content; as for &lt;em&gt;execute&lt;/em&gt; permission, a user can run the file (binary files, or script files like shell scripts or python scripts). And I did know the meanings are a bit different when these permissions apply to a directory. But what are the differences?&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Concurrency Control</title>
      <link>https://pjatgithub.github.io/posts/postgresql-concurrency-control/</link>
      <pubDate>Thu, 13 Apr 2017 20:32:53 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/postgresql-concurrency-control/</guid>
      <description>&lt;h2 id=&#34;transaction-isolation-level&#34;&gt;Transaction Isolation Level&lt;/h2&gt;

&lt;p&gt;SQL standard defines four levels of transaction isolation.&lt;a href=&#34;https://en.wikipedia.org/wiki/Isolation_%28database_systems%29&#34;&gt;[1]&lt;/a&gt; Each level prevents different inconsistency phenomena:&lt;a href=&#34;https://www.postgresql.org/docs/manuals/&#34;&gt;[2]&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;dirty read&lt;/strong&gt; is a transaction reads data written by a concurrent &lt;em&gt;uncommitted&lt;/em&gt; transaction.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;nonrepeatable read&lt;/strong&gt; is a transaction re-reads data it has previously read and finds that data has been modified by another transaction (that &lt;em&gt;committed&lt;/em&gt; since the initial read).&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;phantom read&lt;/strong&gt; is a transaction re-executes a query returning a set of rows that satisfy a search condition and finds that the set of rows satisfying the condition has changed due to another recently-committed transaction.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;serialization anomaly&lt;/strong&gt; is that the result of successfully committing a group of transactions is inconsistent with all possible orderings of running those transactions one at a time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PostgreSQL Basics</title>
      <link>https://pjatgithub.github.io/posts/postgresql-basics/</link>
      <pubDate>Sat, 25 Mar 2017 11:50:57 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/postgresql-basics/</guid>
      <description>&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;

&lt;p&gt;I have installed the PostgreSQL 9.6.2 on Ubuntu 16.04 LTS, and use command-line tools to manage the server with macOS.&lt;/p&gt;

&lt;p&gt;To install PostgreSQL server on Ubuntu 16.04 LTS:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type &lt;code&gt;sudo apt-get install postgresql&lt;/code&gt; to install the server.&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;/etc/postgresql/9.5/main/postgresql.conf&lt;/code&gt;, add the line &lt;code&gt;listen_addresses = &#39;*&#39;&lt;/code&gt; to listen on all IP addresses (&lt;code&gt;localhost&lt;/code&gt; by default).&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;/etc/postgresql/9.5/main/pg_hba.conf&lt;/code&gt;, and change the line &lt;code&gt;host all all 127.0.0.1/32 md5&lt;/code&gt; to &lt;code&gt;host all all 192.168.1.0/24 md5&lt;/code&gt; which enables remote login from the hosts in the local network.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;sudo su postgres&lt;/code&gt; to switch to the user &lt;code&gt;postgres&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;psql&lt;/code&gt; to connect the PostgreSQL server, and then type &lt;code&gt;\password&lt;/code&gt; to change the password of &lt;code&gt;postgres&lt;/code&gt;. (After the installation of PostgreSQL, a user and a group both named &lt;code&gt;postgres&lt;/code&gt; will be created on Ubuntu. And a user also named &lt;code&gt;postgres&lt;/code&gt; will be created on PostgreSQL, like &lt;code&gt;root&lt;/code&gt; in Mysql.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Thinking in ThreadLocal</title>
      <link>https://pjatgithub.github.io/posts/thinking-in-threadlocal/</link>
      <pubDate>Sun, 05 Mar 2017 14:43:31 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/thinking-in-threadlocal/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The class &lt;code&gt;ThreadLocal&lt;/code&gt; enables us to create thread-local variables. There is an example in the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html&#34;&gt;ThreadLocal&lt;/a&gt; API page. In a word, for the same &lt;code&gt;ThreadLocal&lt;/code&gt; instance, different threads will &amp;ldquo;see&amp;rdquo; different values.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Basics of Java Servlet</title>
      <link>https://pjatgithub.github.io/posts/basics-of-java-servlet/</link>
      <pubDate>Thu, 02 Mar 2017 22:35:10 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/basics-of-java-servlet/</guid>
      <description>&lt;p&gt;Servlet is the basis of Java Web.&lt;/p&gt;

&lt;h2 id=&#34;lifecycle-of-servlet&#34;&gt;Lifecycle of Servlet&lt;/h2&gt;

&lt;p&gt;5 phases of the lifecycle of servlet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A servlet class is loaded by the container (Tomcat or Jetty)&lt;/li&gt;
&lt;li&gt;Instantiate the servlet class (no-arg constructor is run)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;init()&lt;/code&gt; method is called (called only &lt;strong&gt;once&lt;/strong&gt; and always before the time the &lt;code&gt;service()&lt;/code&gt; is called) which lets servlet to access the &lt;code&gt;ServletConfig&lt;/code&gt; and &lt;code&gt;ServletContext&lt;/code&gt; objects, where information about the servlet configuration and the web application is stored&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;service()&lt;/code&gt; method is called (handles different client requests in &lt;strong&gt;separate threads&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;destroy()&lt;/code&gt; method is called (called only &lt;strong&gt;once&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is one main state, &lt;strong&gt;initialized&lt;/strong&gt; , in the servlet lifecycle. If the servlet is not initialized, it is either being initialized (running no-arg constructor or &lt;code&gt;init()&lt;/code&gt; method), being destroyed (running &lt;code&gt;destroy()&lt;/code&gt;), or it simply does not exist.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SSH Port Forwarding</title>
      <link>https://pjatgithub.github.io/posts/ssh-port-forwarding/</link>
      <pubDate>Tue, 28 Feb 2017 23:02:34 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/ssh-port-forwarding/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;UPDATE:&lt;/em&gt;
&lt;em&gt;2017-03-05, add how to configure SSH client&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For more details about configuring SSH client, go to &lt;a href=&#34;http://nerderati.com/2011/03/17/simplify-your-life-with-an-ssh-config-file/&#34;&gt;Simplify Your Life With an SSH Config File&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are three types of &lt;a href=&#34;https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding&#34;&gt;port forwarding&lt;/a&gt; with ssh:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Local port forwarding&lt;/strong&gt;: connecting to a remote server via an intermediateSSH server from local machine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remote port forwarding&lt;/strong&gt;: connecting to a remote server (often in local network) via SSH client from SSH server&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic port forwarding&lt;/strong&gt;: connections from various programs are forwarded via the SSH client, then via the SSH server, and finally to several destination servers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>