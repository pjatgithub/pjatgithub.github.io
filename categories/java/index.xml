<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Radar</title>
    <link>https://pjatgithub.github.io/categories/java/</link>
    <description>Recent content in Java on Radar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jun 2018 21:00:33 +0800</lastBuildDate>
    
	<atom:link href="https://pjatgithub.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Experiments About Java Overloading</title>
      <link>https://pjatgithub.github.io/posts/experiments-about-java-overloading/</link>
      <pubDate>Fri, 15 Jun 2018 21:00:33 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/experiments-about-java-overloading/</guid>
      <description>Overloading In Java, overloading is a mechanism to declare two methods with the same name but different signatures (definition can be found in [1]).
Variable Argument List In Java 5, programmers are able to define methods which can be invoked with a variable number of arguments by using variable argument lists. For example, we can define a method like public static void play(Person... persons) and invoke it like play(p1, p2, p3, p4).</description>
    </item>
    
    <item>
      <title>Thinking in ThreadLocal</title>
      <link>https://pjatgithub.github.io/posts/thinking-in-threadlocal/</link>
      <pubDate>Sun, 05 Mar 2017 14:43:31 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/thinking-in-threadlocal/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The class &lt;code&gt;ThreadLocal&lt;/code&gt; enables us to create thread-local variables. There is an example in the &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html&#34;&gt;ThreadLocal&lt;/a&gt; API page. In a word, for the same &lt;code&gt;ThreadLocal&lt;/code&gt; instance, different threads will &amp;ldquo;see&amp;rdquo; different values.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Basics of Java Servlet</title>
      <link>https://pjatgithub.github.io/posts/basics-of-java-servlet/</link>
      <pubDate>Thu, 02 Mar 2017 22:35:10 +0800</pubDate>
      
      <guid>https://pjatgithub.github.io/posts/basics-of-java-servlet/</guid>
      <description>&lt;p&gt;Servlet is the basis of Java Web.&lt;/p&gt;

&lt;h2 id=&#34;lifecycle-of-servlet&#34;&gt;Lifecycle of Servlet&lt;/h2&gt;

&lt;p&gt;5 phases of the lifecycle of servlet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A servlet class is loaded by the container (Tomcat or Jetty)&lt;/li&gt;
&lt;li&gt;Instantiate the servlet class (no-arg constructor is run)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;init()&lt;/code&gt; method is called (called only &lt;strong&gt;once&lt;/strong&gt; and always before the time the &lt;code&gt;service()&lt;/code&gt; is called) which lets servlet to access the &lt;code&gt;ServletConfig&lt;/code&gt; and &lt;code&gt;ServletContext&lt;/code&gt; objects, where information about the servlet configuration and the web application is stored&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;service()&lt;/code&gt; method is called (handles different client requests in &lt;strong&gt;separate threads&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;destroy()&lt;/code&gt; method is called (called only &lt;strong&gt;once&lt;/strong&gt;)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is one main state, &lt;strong&gt;initialized&lt;/strong&gt; , in the servlet lifecycle. If the servlet is not initialized, it is either being initialized (running no-arg constructor or &lt;code&gt;init()&lt;/code&gt; method), being destroyed (running &lt;code&gt;destroy()&lt;/code&gt;), or it simply does not exist.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>